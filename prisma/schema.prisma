7// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

////////////////////////////////////////////////////////////////////////////
enum UserRole {
  ADMIN
  MOD
  PREMIUM
  USER
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?        @default("https://avatarfiles.alphacoders.com/976/97695.gif")
  backgroundImage String?        @default("https://images2.alphacoders.com/941/thumb-1920-941898.jpg")
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  friends         Friend[]       @relation("UserFriend")
  notifications   Notification[]
  rank            UserRole       @default(USER)
  password String?
}

model Friend {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserFriend", fields: [userId], references: [id])
  userId    String
  friendId  String
  accepted  Boolean  @default(false)
  initiator Boolean  @default(false)

  @@index([userId])
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  content   String     @db.VarChar(280)
  authorId  String
  emoji     String?
  fileUrl   String?
  fileKey   String?
  author    User       @relation(fields: [authorId], references: [id])
  likes     LikePost[]
  comments  Comment[]

  @@index([authorId])
}

model LikePost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])

  @@index([postId])
}

model LikeComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@index([commentId])
}

model Comment {
  id        String        @id @default(cuid())
  authorId  String
  createdAt DateTime      @default(now())
  content   String        @db.VarChar(280)
  postId    String
  post      Post          @relation(fields: [postId], references: [id])
  likes     LikeComment[]

  @@index([postId])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  link      String
  content   String
  authorId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  visited   Boolean  @default(false)
  postId    String?
  commentId String?

  @@index([userId])
}
